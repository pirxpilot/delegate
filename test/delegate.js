import test from 'node:test';
import delegate from '../index.js';

const html = `
  <ul id="first">
    <li>
      <a class="link-1"></a>
    </li>
    <li>
      <span class="icon">
      </span><a class="link-2"></a>
    </li>
  </ul>
  <ul>
    <li><a class="link-3"></li>
  </ui>
`;

test('delegate', async t => {
  let ul;

  t.beforeEach(function () {
    document.body.innerHTML = html;
    ul = document.querySelector('ul#first');
  });

  await t.test('must handle events when bound', t => {
    let clicks = 0;
    const link1 = document.querySelector('.link-1');

    function handle(e) {
      t.assert.equal(this, ul);
      t.assert.equal(e.delegateTarget, link1);
      t.assert.equal(e.target, link1);
      clicks++;
    }

    const h = delegate.bind(ul, 'li a', 'click', handle);

    link1.click();
    t.assert.equal(clicks, 1);

    delegate.unbind(ul, 'click', h);
  });

  await t.test('must handle events triggered on descendants when bound', t => {
    let clicks = 0;
    const link1 = document.querySelector('.link-1');

    function handle(e) {
      t.assert.equal(this, ul);
      t.assert.equal(e.delegateTarget, link1.parentNode);
      t.assert.equal(e.target, link1);
      clicks++;
    }

    const h = delegate.bind(ul, 'li', 'click', handle);

    link1.click();
    t.assert.equal(clicks, 1);

    delegate.unbind(ul, 'click', h);
  });

  await t.test('must ignore events generated by elements that do not match selector', t => {
    let clicks = 0;
    const span = document.querySelector('span');

    function handle() {
      clicks++;
    }

    const h = delegate.bind(ul, 'li a', 'click', handle);

    span.click();
    t.assert.equal(clicks, 0);

    delegate.unbind(ul, 'click', h);
  });

  await t.test('must ignore events generated by elements that are not children', t => {
    let clicks = 0;
    const link3 = document.querySelector('.link-3');

    let p = link3;
    while (p) {
      p = p.parentNode;
    }

    function handle() {
      clicks++;
    }

    const h = delegate.bind(ul, 'li a', 'click', handle);

    t.assert.equal(clicks, 0);
    link3.click();
    t.assert.equal(clicks, 0);

    delegate.unbind(ul, 'click', h);
  });
});
