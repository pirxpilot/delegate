const { describe, it, beforeEach } = require('node:test');
const delegate = require('../');

const html = `
  <ul id="first">
    <li>
      <a class="link-1"></a>
    </li>
    <li>
      <span class="icon">
      </span><a class="link-2"></a>
    </li>
  </ul>
  <ul>
    <li><a class="link-3"></li>
  </ui>
`;

describe('delegate', function () {
  beforeEach(function () {
    document.body.innerHTML = html;
    this.ul = document.querySelector('ul#first');
  });

  it('must handle events when bound', function () {
    let clicks = 0;
    const ul = this.ul;
    const link1 = document.querySelector('.link-1');

    function handle(e) {
      this.should.eql(ul);
      e.delegateTarget.should.eql(link1);
      e.target.should.eql(link1);
      clicks++;
    }

    const h = delegate.bind(this.ul, 'li a', 'click', handle);

    link1.click();
    clicks.should.eql(1);

    delegate.unbind(this.ul, 'click', h);
  });

  it('must handle events triggered on descendants when bound', function () {
    let clicks = 0;
    const ul = this.ul;
    const link1 = document.querySelector('.link-1');

    function handle(e) {
      this.should.eql(ul);
      e.delegateTarget.should.eql(link1.parentNode);
      e.target.should.eql(link1);
      clicks++;
    }

    const h = delegate.bind(this.ul, 'li', 'click', handle);

    link1.click();
    clicks.should.eql(1);

    delegate.unbind(this.ul, 'click', h);
  });

  it('must ignore events generated by elements that do not match selector', function () {
    let clicks = 0;
    const span = document.querySelector('span');

    function handle() {
      clicks++;
    }

    const h = delegate.bind(this.ul, 'li a', 'click', handle);

    span.click();
    clicks.should.eql(0);

    delegate.unbind(this.ul, 'click', h);
  });

  it('must ignore events generated by elements that are not children', function () {
    let clicks = 0;
    const link3 = document.querySelector('.link-3');

    let p = link3;
    while (p) {
      p = p.parentNode;
    }

    function handle() {
      clicks++;
    }

    const h = delegate.bind(this.ul, 'li a', 'click', handle);

    clicks.should.eql(0);
    link3.click();
    clicks.should.eql(0);

    delegate.unbind(this.ul, 'click', h);
  });

});
